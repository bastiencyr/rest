# utilisateur/groupe des processus worker. Le master processus nginx est toujours lancé en root.
user www-data www-data;
# un seul processus worker pour le benchmark seulement, en production, mettre auto ou nb_core/2 (cf doc)
worker_processes 1;
# le nombre de fichier simultané qu'un worker peut ouvrir, limité également par l'OS.
worker_rlimit_nofile 2048;
# pidfile
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	# nombre de connexion simultanée maximum ouvert par un seul worker nginx. worker_connection < worker_rlimit_nofile
	# A 64, jai eu l'erreur "64 worker_connections are not enough".
	worker_connections 2048;
	# si on, un worker traite toutes les connexions en même temps. En pratique, je ne pense pas avoir très bien compris puisque quand je mets on,
	# les performances chutent dramatiquement
	multi_accept off;
	# epoll permet de surveiller et de réagir aux modifications d'un fichier, pour un webserver c'est pour les sockets que c'est intéressant.
	# nginx ne réinvente pas la roue et utilise ce que l'os lui donne pour surveiller la modification d'un socket. Nginx peut donc lancer plusieurs
	# workers qui écoute sur le même socket grâce à epoll. Nginx essaiera de prendre la meilleure méthode si on lui donne pas explicitement une.
	# Dépendant du système d'exploitation. Non disponible sur Windows par ex. Une des raisons pour lesquelles Nginx est moins bien sur Windows.
	use epoll;
}

http {

	##
	# Basic Settings
	##
	# j'ai pas compris ce que ça faisait
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	types_hash_max_size 2048;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##
	# par défaut ici

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##
	# D'après la doc, le buffer est par défaut à 64K mais quand je le mets explicitement à 64K, j'ai de meilleur performance.
	# Ici on bufferise les écritures sur access.log, ce qui donne meilleur perf
	access_log /var/log/nginx/access.log combined buffer=64K;
	# Pas forcément une bonne idée de bufferiser les erreurs..., de toute façon ça n'apporte pas grand chose
	error_log /var/log/nginx/error.log;

	# on configure une zone de cache sur le serveur proxy
	# ici on le limite à 10go maximum. Et si une entrée n'est pas utilisé au bout de 10m, on l'efface (même si le Cache-Control a défini un temps plus long)
	proxy_cache_path /var/log/nginx/cache levels=1:2 keys_zone=test:10m max_size=10g inactive=10m;

	##

	gzip on;
	gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}
