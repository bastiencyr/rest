upstream myapp1 {

	# Maintenant on maintient la connexion entre le proxy et les serveurs proxied, il faut alors configurer
	# http1 et le header Connection (voir ci-dessous). Keepalive doit être le plus petit possible, c le nombre de connexion maintenues par un worker.
	keepalive 32;

	# TCP or Unix socket, les socket unix sont plus rapides, donc à préférer en locale
	server unix:/run/rest-py.sock;
}


server {
	# quand une requête est redirigée, les serveurs proxied recoivent  une requete http.
	# Nginx modifie les headers Connection et Host. Ici on s'assure que c'est headers ne sont meme pas passés aux
	# serveurs proxied
	proxy_set_header Connection "";
	proxy_set_header Host "";

	# ici on maintient la connexion entre le client et le serveur proxy
	keepalive_disable none;
	# nombre maximum de requete pour une seule connexion de type keep-alive
	keepalive_requests 10000;
	# temps maximum pour une session keep alive, il vaut mieux éviter de garder trop de connexion ouverte
	keepalive_timeout 3m;

	# Pour maintenir la connexion entre le proxy et un serveur proxied, on utilise keepalive
	# nginx requiert alors que la versio http soit 1.1 et Connection header = "" (deja fait au dessus)
	proxy_http_version 1.1;

	listen          8000 ;
	server_name     127.0.0.1;
	location / {
		# on configure le cache (voir la note en fin pour le cache)
		# on active la zone de cache. Cela ne signifie pas qu'elle sera utilisée !
		proxy_cache test;
		# On ajoute le statut du cache du serveur proxy
	        add_header X-Cache-Status $upstream_cache_status;
		# temps de validité du cache. A préciser si Cache-Control n'est pas donné par le serveur proxied (cf note)
		# proxy_cache_valid any 10s;

		# add_header ajoute un header à la réponse du proxy vers le client (firefox)
		# Cela n'autorise pas le proxy à mettre en cache dans sa zone ! Il faut donner proxy_cache_valid ou que le serveur proxied configure
		# Cache-Control (cf code).
		# attention à bien séparer par une ','. Aucun warning ne sera donné en cas d'erreur.
		# Ici, seul firefox pourra mettre en cache (ou encore un aute proxy intermédiaire...)
		add_header Cache-Control "public, max-age=1000";

		proxy_pass http://myapp1;
		}
}

#### CACHE ####
# Notes rapides
# add_header ajoute un header entre le proxy et le client (firefox)

# proxy_set_header ajoute un header entre le proxy et le serveur proxied

# il n'existe pas de moyen dajouter un header entre le serveur proxied et le proxy mais on peut changer le comportement autrement avec
# proxy_cache_valid par exemple (équivalent de max-age)

# le temps de cache est tc = min(inactive, max-age) où inactive est le temps d'inactivité maximale de la zone de cache (cf proxy_set_path)
# et max-age le temps dans le header Cache-Control. Si max-age n'est pas précisé, tc = inactive. inactive = 10mn par défaut. Si max-age n'est pas donné
# et proxy_cache_valid, rien n'est mis en cache.

# proxy_cache_valid n'est pas prioritaire si Cache-Control est donné


# Notes longues
# Le cache peut être géré au niveau du navigateur ou du proxy. Tout le monde a le droit de faire une demande mais tout le monde peut ignorer une demande aussi.
# On peut demander au navigateur de mettre en cache avec le header "Cache-Control private, max-age=10". Le navigateur peut également envoyer
# une requete avec le header "Cache-Control private, max-age=10", ce qui signifie qu'il souhaite que le cache ne soit pas public et au maximum
# dure 10 secondes. Mais Nginx peut très bien ne pas prendre en compte ça, quand même mettre en cache et renvoyer le header "Cache-Control private, max-age=100".

# Ici, on a firefox > Nginx proxy > serveur proxied > Nginx proxy > Firefox
# Quand Nginx redirige la requête vers le serveur proxied, il peut réécrire les headers avec proxy_set_header. Ensuite le serveur proxied (proxy_pass)
# renvoie une réponse au serveur proxy qui renvoie lui même à firefox
# Cas 1: Firefox envoie "Cache-Control = public, max-age=30"
# Cas 1.1: Nginx redirige la requête sans rien modifier au serveur proxied et le serveur proxied renvoie à Nginx le meme header
#          Alors Nginx voit que le cache est  public et le met donc dans sa zone de cache.
#	   Ce cache sera supprimé en fonction du paramètre inactive (defaut = 10m) dans proxy_cache_path (cf nginx.conf) mais invalidé
#	   avant (max-age=30 secondes). Si le cache est supprimé alors
#	   que max-age ne l'invalidait pas, le cache est reconstitué sans erreur.

# Cas 1.2: Nginx redirige la requête au serveur proxied sans rien modifier et le serveur proxied renvoie à Nginx "Cache-Control = private, max-age=30"
#	Nginx voit private, il ne met pas en cache. Mais firefox peut mettre en cache.

# Cas 1.3:  Nginx supprime le header Cache-Control et le serveur proxied ne renvoie pas non plus Cache-Control
#	Nginx est perdu. Il ne met alors rien en cache à moins que proxy_cache_valid ne soit configuré : proxy_cache_valid any 30s;


# Cas 2: Firefox n'envoie pas le header Cache-Control.
# On retombe dans les cas précédents, cela dépend des proxy et services que le paquet traverse qui ne sont pas obligés de respecter les headers.
# Nginx peut forcer firefox à mettre en cache en ajoutant un header à la requête SORTANTE : add_header Cache-Control "private, max-age=30". Cela n'empêche en
# aucun cas Nginx de mettre sur son cache proxy meme si on a mis prvate: cela concerne la requête sortante !
